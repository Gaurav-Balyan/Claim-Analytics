import { Component, OnInit, ViewChild, ElementRef } from '@angular/core';
import { Router, ActivatedRoute } from '@angular/router';
import { MatDialog } from '@angular/material';
import { flatMap } from 'rxjs/operators';
import * as pbi from 'powerbi-client';
import * as _ from 'lodash';

import { GlobalErrorHandler } from 'src/app/services/exception-handler/global-error-handler';
import { LoaderService } from 'src/app/services/loader.service';
import { NavService } from 'src/app/services/nav.service';
import { SecurityService } from 'src/app/services/security.service';
import { ReportService } from '../../../services/report.service';
import { AuthService } from 'src/app/services/auth.service';
import { SessionService } from 'src/app/services/session.service';
import { NavItem } from 'src/app/shared/models/nav-item.model';
import {
  READ,
  WRITE,
  PUBLISH,
  VIEW,
  SEVERITY_PRODUCTS
} from 'src/app/shared/constants';
import { ModalPopupComponent } from 'src/app/shared/modal.popup';
import { UserDetail } from 'src/app/shared/models/user-detail.model';

@Component({
  selector: 'app-report',
  templateUrl: './report.component.html',
  styleUrls: ['./report.component.css']
})
export class ReportComponent implements OnInit {
  item: NavItem;
  navItems: any;
  powerBIDetails: any;
  userAccounts: any;
  selectedAccount: any;
  display: boolean;
  filter: any;
  isSaved: boolean;
  isDataSelected: boolean;
  @ViewChild('reportContainer', { static: false }) reportContainer: ElementRef;

  constructor(
    public router: Router,
    private activatedRoute: ActivatedRoute,
    private authService: AuthService,
    private navService: NavService,
    private securityService: SecurityService,
    private reportService: ReportService,
    private loaderService: LoaderService,
    private errorService: GlobalErrorHandler,
    private sessionService: SessionService,
    private dialog: MatDialog
  ) { }

  ngOnInit() {
    this.activatedRoute.params.subscribe(params => {
      this.loaderService.show();
      // To-Do
      this.navService.skipDefault.next(undefined);
      // Set the currently active item in menu
      this.item = this.navService.getSelectedNavItem();
      const userId = this.authService.getUserData('userId');
      const productId = this.navService.getProductId();

      // Fetch UserAccounts and PowerBI details
      this.reportService
        .fetchUserAccounts(userId, productId)
        .pipe(
          flatMap((res: any) => {
            // Bind the user accounts and the selected option
            this.userAccounts = res.userAccount;

            // Retrieve the selected account otherwise set a default
            this.selectedAccount = sessionStorage.getItem('SELECTED_ACCOUNT')
              ? sessionStorage.getItem('SELECTED_ACCOUNT')
              : this.userAccounts[0].accId;

            sessionStorage.setItem('SELECTED_ACCOUNT', this.selectedAccount);
            return this.reportService.powerBIDetails(
              this.item.reportId,
              this.selectedAccount
            );
          })
        )
        .subscribe(
          powerBIData => {
            // Show the PowerBI report
            this.powerBIDetails = powerBIData;
            this.showReport(READ, VIEW);
            this.loaderService.hide();
          },
          (error: any) => {
            this.loaderService.hide();
          }
        );
    });
  }

  onUserAccountChange() {
    sessionStorage.setItem('SELECTED_ACCOUNT', this.selectedAccount);

    // Reload the Menu to get latest items
    this.navService.menuChanged.next();
    // To-Do
    this.navService.skipDefault.next(this.item.menuLinkId);
    this.router.navigate(['/dashboard']);
  }

  // Used to display the PowerBI report
  showReport(mode, display) {
    // Flag to control saved event handler of report
    this.isSaved = false;
    this.navService.skipDefault.next(undefined);
    this.display = display === VIEW ? true : false;
    const accessToken = this.powerBIDetails.EmbedToken.token;
    // To-Do
    const groupWorkspaceId = '0335be74-d584-45c2-a82c-19ede3845f5d';
    const embedUrl =
      this.powerBIDetails.EmbedUrl +
      this.powerBIDetails.Id +
      '&groupId=' +
      groupWorkspaceId;
    const embedReportId = this.powerBIDetails.Id;
    let config = {};
    const acctId = this.selectedAccount;
    const breadCrumb = this.item.breadCrumb;
    const reportName = this.item.displayName;
    const defConfig = {
      type: 'report',
      tokenType: pbi.models.TokenType.Embed,
      accessToken,
      embedUrl,
      id: embedReportId,
      settings: {
        filterPaneEnabled: true,
        navContentPaneEnabled: false,
        useCustomSaveAsDialog: true
      },
      permissions: pbi.models.Permissions.Read,
      viewMode: pbi.models.ViewMode.View
    };

    // Setting config based on authorization status of user
    if (mode === READ) {
      config = {
        ...defConfig
      };
    } else if (mode === WRITE) {
      config = {
        ...defConfig,
        permissions: pbi.models.Permissions.Copy,
        viewMode: pbi.models.ViewMode.Edit
      };
    } else if (mode === PUBLISH) {
      config = {
        ...defConfig,
        permissions: pbi.models.Permissions.Copy,
        viewMode: pbi.models.ViewMode.Edit
      };
    }

    const reportContainer = this.reportContainer.nativeElement;
    const powerbi = new pbi.service.Service(
      pbi.factories.hpmFactory,
      pbi.factories.wpmpFactory,
      pbi.factories.routerFactory
    );

    // Reset the container to load the next report
    powerbi.reset(reportContainer);

    // Embed the report in the container here
    const report = <pbi.Report>powerbi.embed(reportContainer, config);
    const saveAsParameters = {
      name:
        reportName +
        '_' +
        this.authService.getUserData('userId') +
        '_' +
        Date.now()
    };

    // Unregistering event handlers to prevent multiple handlers
    report.off('loaded');
    report.off('saveAsTriggered');
    report.off('dataSelected');
    report.off('error');
    report.off('saved');
    report.eventHandlers = [];

    // SaveAs report
    report.on('saveAsTriggered', event => {
      report.saveAs(saveAsParameters);
    });

    report.on('saved', (event: any) => {
      if (!this.isSaved) {
        const componentId = this.item.componentId;
        const userId = this.authService.getUserData('userId');
        const reportId = _.get(event, 'detail.reportObjectId');
        const reportName = _.get(event, 'detail.reportName');
        const accId = this.selectedAccount;
        const clientName = sessionStorage.getItem('SUBDOMAIN');
        const savedData = {
          componentId,
          userId,
          reportId,
          reportName,
          accId,
          clientName
        };

        // Need to retrieve reportId after page refresh
        sessionStorage.setItem('REPORT_ID', this.item.reportId);
        this.reportService.saveReport(savedData).subscribe((data: any) => {
          if (data.OK) {
            const saveMessage = this.dialog.open(ModalPopupComponent, {
              data: {
                message: 'Report has been saved successfully',
                btnOk: 'OK'
              }
            });
            saveMessage.afterClosed().subscribe(result => {
              this.navService.menuChanged.next();
              this.router.navigate(['/dashboard']);
              // To-Do
              this.navService.skipDefault.next(this.item.menuLinkId);
            });
          }
        });

        this.isSaved = true;
      }
    });

    // Event generated by the report to handle data selection
    let claimNumber;
    report.on('dataSelected', (event: any) => {
      const userId = this.authService.getUserData('userId');
      const productId = this.navService.getProductId();

      _.forEach(event.detail.dataPoints[0].identity, value => {
        // Fetch the claim number according to the column generated dynamically
        if (
          _.find(value, target => target && target.column === 'Claim Number')
        ) {
          claimNumber = value.equals;
          this.isDataSelected = true;
        }
      });
      if (claimNumber != null) {
        // Encrypt the parameters and then encode using btoa(Binary to ASCII) to ensure correct routing behavior
        let claimId = claimNumber;
        claimId = claimId.replace(/-/g, '');
        const encryptedClaimNumber = btoa(
          this.securityService.encrypt(claimId)
        );
        const encryptedUserId = btoa(this.securityService.encrypt(userId));

        // Check to prevent multiple call on dataSelected event
        if (_.includes(SEVERITY_PRODUCTS, parseInt(productId))) {
          if (sessionStorage.getItem('SEV_CLAIM_NUMBER') !== claimNumber) {
            window.open(
              `/claim/${encryptedClaimNumber}/${encryptedUserId}`,
              '_blank'
            );
          }
          sessionStorage.setItem('SEV_CLAIM_NUMBER', claimNumber);
        } else {
          if (sessionStorage.getItem('CLAIM_NUMBER') !== claimNumber) {
            window.open(
              `/claimDetail/${encryptedClaimNumber}/${encryptedUserId}`,
              '_blank'
            );
          }
          sessionStorage.setItem('CLAIM_NUMBER', claimNumber);
        }
      }
      claimNumber = null;
      this.isDataSelected = false;
    });

    // Events not used in application but needed to keep session activity going when user interacts with reports
    report.on('loaded', () => {
      this.sessionService.markSessionActive();
    });

    report.on('rendered', () => {
      this.sessionService.markSessionActive();
    });

    report.on('commandTriggered', () => {
      this.sessionService.markSessionActive();
    });

    report.on('buttonClicked', () => {
      this.sessionService.markSessionActive();
    });
  }

  // Used to publish the PowerBI report
  onPublishReport() {
    this.navService.skipDefault.next(undefined);
    const componentId = this.item.componentId;
    const accId = this.selectedAccount;
    const userId = this.authService.getUserData('userId');
    const reportId = this.item.reportId;
    const clientName = sessionStorage.getItem('SUBDOMAIN');
    const publishedData = {
      accId,
      componentId,
      userId,
      reportId,
      clientName
    };

    const publishConfirm = this.dialog.open(ModalPopupComponent, {
      data: {
        message: 'Are you sure to publish report?',
        btnOk: 'Yes',
        btnCancel: 'No'
      }
    });

    publishConfirm.afterClosed().subscribe(result => {
      this.loaderService.show();
      let publishMessage;

      if (result) {
        this.reportService.publishReport(publishedData).subscribe(
          (publishStatus: any) => {
            if (publishStatus.OK) {
              publishMessage = this.dialog.open(ModalPopupComponent, {
                data: {
                  message: 'Report has been published successfully',
                  btnOk: 'OK'
                }
              });
            } else {
              publishMessage = this.dialog.open(ModalPopupComponent, {
                data: {
                  message: 'Error occured in publishing report',
                  btnOk: 'OK'
                }
              });
            }
            this.loaderService.hide();
            publishMessage.afterClosed().subscribe(res => {
              this.navService.menuChanged.next();
              // To-Do
              this.navService.skipDefault.next(this.item.menuLinkId);
              this.router.navigate(['/dashboard']);
            });
          },
          (error: any) => {
            this.loaderService.hide();
            // this.errorService.handleError(error);
          }
        );
      } else {
        this.loaderService.hide();
      }
    });
  }
}
