import { Component, OnInit } from '@angular/core';
import { Router, ActivatedRoute } from '@angular/router';
import { NgForm } from '@angular/forms';
import { flatMap } from 'rxjs/operators';
import * as _ from 'lodash';

import { AuthService } from '../../services/auth.service';
import { LoaderService } from 'src/app/services/loader.service';
import { UserLogin } from '../../shared/models/user.model';
import { ClientDetails } from 'src/app/shared/models/client-details.model';
import { ASSETS_PATH } from '../../shared/constants';
import { GlobalErrorHandler } from 'src/app/services/exception-handler/global-error-handler';
import { SessionService } from 'src/app/services/session.service';

@Component({
  selector: 'app-login',
  templateUrl: './login.component.html',
  styleUrls: ['./login.component.css']
})
export class LoginComponent implements OnInit {
  clientDetails: ClientDetails;
  loginError: string;

  constructor(
    private authService: AuthService,
    private router: Router,
    private route: ActivatedRoute,
    private loaderService: LoaderService,
    private errorService: GlobalErrorHandler
  ) { }

  ngOnInit() {
    this.loaderService.show();
    this.getClientDetails();
  }

  // Needed resolver to prevent route being loaded before receiving client data
  getClientDetails() {
    this.route.data.subscribe(
      ({ data }) => {
        if (data.OK) {
          this.clientDetails = data.brandResponse;

          // Merge the path with logos folder in assets directory
          const logo = `${ASSETS_PATH}${data.brandResponse.logo}`;
          localStorage.setItem('CLIENT_LOGO', logo);
          _.set(this.clientDetails, 'logo', logo);
          this.loaderService.hide();
        }
      },
      (error: any) => {
        this.loaderService.hide();
        this.errorService.handleError(error);
      }
    );
  }

  onLogin(loginForm: NgForm) {
    this.loaderService.show();
    const userId: string = loginForm.value.email;
    const password: string = loginForm.value.password;
    const clientName: string = sessionStorage.getItem('SUBDOMAIN');

    // Token String for OWIN Authentication
    const tokenDataString = `username=${userId}&password=${password}&clientName=${clientName}&grant_type=password`;

    // Fetch the OWIN token and authenticate the user
    this.authService
      .getUserToken(tokenDataString)
      .pipe(
        flatMap((res: any) => {
          if (res.access_token) {
            localStorage.setItem('ACCESS_TOKEN', res.access_token);
            localStorage.setItem('REFRESH_TOKEN', res.refresh_token);
            const userData = {
              userId,
              clientName
            };
            return this.authService.authenticateUser(userData);
          }
        })
      )
      .subscribe(
        (data: any) => {
          if (data.OK) {
            this.authService.setUserData(data);
            this.authService.setProductsAccess(_.get(data, 'Product_Id'));
            this.loaderService.hide();

            // Redirection based on the condition if user has agreed to Terms & Conditions
            if (data.tncAgreed) {
              this.router.navigateByUrl('/terms');
            } else {
              this.router.navigateByUrl('/cards');
            }
          }else
          {
            this.loginError = data.message;
          }
          this.loaderService.hide();
        },
        (error: any) => {
          this.loaderService.hide();
          this.loginError = error.error.error_description;
        }
      );
  }

  clearError() {
    this.loginError = '';
  }
}
