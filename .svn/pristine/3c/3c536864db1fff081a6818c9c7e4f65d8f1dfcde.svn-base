import { Injectable } from '@angular/core';
import { UserLogin } from '../shared/models/user.model';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Router } from '@angular/router';
import { Observable } from 'rxjs';
import * as _ from 'lodash';

import { LOGINURL, FORGETPASSWORDURL, RESETPASSWORDURL, PRODUCTLIST, TOKENAPIURL, SETTNCCONDITION } from '../../environments/environment';
import { USERID, USERNAME, LOGINNAME } from '../shared/constants';

@Injectable({
  providedIn: 'root'
})
export class AuthService {
  constructor(private http: HttpClient, private router: Router) {

  }

  authenticateUser(userLoginData: any): Observable<any> {
    return this.http.post(LOGINURL, userLoginData);
  }

  logoutUser() {
    localStorage.removeItem('ACCESS_TOKEN');
    this.router.navigate(['./login']);
  }

  checkTerms(userData){
    return this.http.post(SETTNCCONDITION, userData);
  }

  setProductsAccess(productsId) {
    sessionStorage.setItem('PRODUCTS_ALLOWED', productsId);
  }

  getProductsAccess() {
    return sessionStorage.getItem('PRODUCTS_ALLOWED');
  }

  setUserData(userData) {
    // Pick the user related properties to display in the app
    const userToDisplay = _.pick(userData, [USERID, USERNAME, LOGINNAME]);
    sessionStorage.setItem('USER', JSON.stringify(userToDisplay));
  }

  getUserToken(tokenData) {
    const httpOptions = {
      headers: new HttpHeaders({
        'Content-Type': 'application/x-www-form-urlencoded',
        'X-Skip-Interceptor': ''
      })
    };
    return this.http.post(TOKENAPIURL, tokenData, httpOptions);
  }

  getUserData(prop) {
    return _.get(JSON.parse(sessionStorage.getItem('USER')), prop);
  }

  getProductList() {
    return this.http.post(PRODUCTLIST, {});
  }

  forgetPassword(userData) {
    return this.http.post(FORGETPASSWORDURL, userData);
  }

  resetPassword(userData) {
    return this.http.post(RESETPASSWORDURL, userData);
  }

  public isLoggedIn() {
    return localStorage.getItem('ACCESS_TOKEN') !== null;
  }

  getRefreshToken(tokenData) {
    const httpOptions = {
      headers: new HttpHeaders({
        'Content-Type': 'application/x-www-form-urlencoded',
        'X-Skip-Interceptor': ''
      })
    };
    return this.http.post(TOKENAPIURL, tokenData, httpOptions);
  }
}
