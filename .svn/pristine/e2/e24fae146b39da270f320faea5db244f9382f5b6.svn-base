import { Component, HostBinding, Input, OnInit } from '@angular/core';
import {
  animate,
  state,
  style,
  transition,
  trigger
} from '@angular/animations';
import { Router } from '@angular/router';
import * as _ from 'lodash';

import { NavItem } from 'src/app/shared/models/nav-item.model';
import { NavService } from 'src/app/services/nav.service';
import { flattenItems } from 'src/app/helpers/utility/common-functions';
import { CHILDREN } from 'src/app/shared/constants';

@Component({
  selector: 'app-menu-list-item',
  templateUrl: './menu-list-item.component.html',
  styleUrls: ['./menu-list-item.component.scss'],
  animations: [
    trigger('indicatorRotate', [
      state('collapsed', style({ transform: 'rotate(0deg)' })),
      state('expanded', style({ transform: 'rotate(180deg)' })),
      transition(
        'expanded <=> collapsed',
        animate('225ms cubic-bezier(0.4,0.0,0.2,1)')
      )
    ])
  ]
})
export class MenuListItemComponent implements OnInit {
  selectedProp: any;
  expanded: boolean;
  @HostBinding('attr.aria-expanded') ariaExpanded = this.expanded;
  @Input() item: NavItem;
  @Input() depth: number;
  @Input() navCollection: any;

  constructor(public navService: NavService, public router: Router) {
    if (this.depth === undefined) {
      this.depth = 0;
    }
  }

  ngOnInit() { }

  onItemSelected(item: NavItem, navCollection?: any) {
    if (!item.children || !item.children.length) {
      // Handle the case for having class for active menu
      if (navCollection) {
        const items = flattenItems(navCollection, CHILDREN);
        _.forEach(items, val => {
          val.currentlyActive = false;
        });
      }
      item.currentlyActive = true;
      // Check to see if item clicked is part of user management otherwise fetch the report
      if (item.route && !item.reportId) {
        this.router.navigate([item.route]);
      } else {
        this.navService.setSelectedNavItem(item);
        this.router.navigate(['/dashboard/report', item.reportId]);
      }
    }
    if (item.children && item.children.length) {
      this.expanded = !this.expanded;
    }
  }
}
